{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"LHCb software documentation \u00b6 It is hard to follow documentation so the purpose is the gather the various docs that the group writes over time. The group will try to gather the documentation of the LHCb software and general tools it uses.","title":"Home"},{"location":"index.html#lhcb-software-documentation","text":"It is hard to follow documentation so the purpose is the gather the various docs that the group writes over time. The group will try to gather the documentation of the LHCb software and general tools it uses.","title":"LHCb software documentation"},{"location":"Allen/build.html","text":"Allen \u00b6 Build Allen on CERN Lxplus \u00b6 Setup the environment source /cvmfs/lhcb.cern.ch/lib/LbEnv Clone Allen from CERN gitlab git clone https://gitlab.cern.ch/lhcb/Allen.git Allen Build Allen cd Allen mkdir build cd build cmake -DSTANDALONE=ON -DCMAKE_TOOLCHAIN_FILE=/cvmfs/lhcb.cern.ch/lib/lhcb/lcg-toolchains/LCG_101/x86_64-centos7-clang12-opt.cmake .. Build the project make -j 4 Run a test to see if it works toolchain/wrapper ./Allen --sequence=hlt1_pp_default Build Allen on Sleepy \u00b6 Setup the environment source /cvmfs/lhcb.cern.ch/lib/var/lib/LbEnv/stable/linux-64/bin/activate Clone Allen from CERN gitlab git clone https://gitlab.cern.ch/lhcb/Allen.git Allen Build Allen if you want to build for CPU then run cd Allen mkdir build cd build cmake -DSTANDALONE=ON -DCMAKE_TOOLCHAIN_FILE=/cvmfs/lhcb.cern.ch/lib/lhcb/lcg-toolchains/LCG_101/x86_64-centos7-clang12-opt.cmake .. but if you want to build for GPU cd Allen mkdir build cd build cmake -DSTANDALONE=ON -DCMAKE_TOOLCHAIN_FILE=/cvmfs/lhcb.cern.ch/lib/lhcb/lcg-toolchains/LCG_101/x86_64-centos7-clang12+cuda11_4-opt.cmake .. Build the project make -j 4 Run a test to see if it works toolchain/wrapper ./Allen --sequence=hlt1_pp_default","title":"Allen"},{"location":"Allen/build.html#allen","text":"","title":"Allen"},{"location":"Allen/build.html#build-allen-on-cern-lxplus","text":"Setup the environment source /cvmfs/lhcb.cern.ch/lib/LbEnv Clone Allen from CERN gitlab git clone https://gitlab.cern.ch/lhcb/Allen.git Allen Build Allen cd Allen mkdir build cd build cmake -DSTANDALONE=ON -DCMAKE_TOOLCHAIN_FILE=/cvmfs/lhcb.cern.ch/lib/lhcb/lcg-toolchains/LCG_101/x86_64-centos7-clang12-opt.cmake .. Build the project make -j 4 Run a test to see if it works toolchain/wrapper ./Allen --sequence=hlt1_pp_default","title":"Build Allen on CERN Lxplus"},{"location":"Allen/build.html#build-allen-on-sleepy","text":"Setup the environment source /cvmfs/lhcb.cern.ch/lib/var/lib/LbEnv/stable/linux-64/bin/activate Clone Allen from CERN gitlab git clone https://gitlab.cern.ch/lhcb/Allen.git Allen Build Allen if you want to build for CPU then run cd Allen mkdir build cd build cmake -DSTANDALONE=ON -DCMAKE_TOOLCHAIN_FILE=/cvmfs/lhcb.cern.ch/lib/lhcb/lcg-toolchains/LCG_101/x86_64-centos7-clang12-opt.cmake .. but if you want to build for GPU cd Allen mkdir build cd build cmake -DSTANDALONE=ON -DCMAKE_TOOLCHAIN_FILE=/cvmfs/lhcb.cern.ch/lib/lhcb/lcg-toolchains/LCG_101/x86_64-centos7-clang12+cuda11_4-opt.cmake .. Build the project make -j 4 Run a test to see if it works toolchain/wrapper ./Allen --sequence=hlt1_pp_default","title":"Build Allen on Sleepy"},{"location":"Boole/run.html","text":"Boole Documentation \u00b6 The purpose of this page is to collect some new documentation for important aspects about LHCb digitization software called Boole . All of this assumes that you have already a current LHCb software installation (i.e on lxplus ) Quick Setup \u00b6 Set up Gauss: lb-dev Boole/v41r2 you can decide which version specifying what is after Boole so it is like Boole/<version> cd to the Boole dir cd ./BooleDev_v41r2 run git lb-use Boole run make configure $$ make install This can be done on one command like lb-dev Boole/v49r21 \\\\ cd ./BooleDev_v41r2 \\\\ git lb-use Boole \\\\ make configure \\\\ make install Example \u00b6 In this example, I will take the .sim file from LHCb starter kit example and run it through Boole to create the digitization. The startedkit example which deals with this decay $\\left.D^{*+} \\rightarrow D^{0}\\left(\\rightarrow K^{+} K^{-} \\mu^{+} \\mu^{-}\\right) \\pi^{+}\\right)$. Following the same tutorial I wrote about Gauss here . The idea is similar, you pass the options to /.run script or you can have job file like Boole.Job.py which contains everything. I will do the later becuase it is easier to debug and more organized. This is a very minimal Boole job file from Gaudi.Configuration import * from Configurables import Boole, LHCbApp from Gaudi.Configuration import * importOptions(\"$APPCONFIGOPTS/Boole/Default.py\") importOptions(\"$APPCONFIGOPTS/Boole/DataType-2015.py\") importOptions(\"$APPCONFIGOPTS/Boole/Boole-SetOdinRndTrigger.py\") importOptions(\"$APPCONFIGOPTS/Persistency/Compression-ZLIB-1.py\") importOptions(\"$APPCONFIGOPTS/Boole/SMOG.py\") LHCbApp().DDDBtag = \"dddb-20170721-3\" LHCbApp().CondDBtag = \"sim-20170721-2-vc-md100\" Boole().DatasetName = \"Example\" HistogramPersistencySvc().OutputFile = \"example.root\" EventSelector().Input = [\"DATAFILE='PFN:/afs/cern.ch/user/m/melashri/public/sim_tutorial/Gauss-27175000-5ev-20220526.sim', TYP='POOL_ROOTTREE' OPT='READ'\"] OutputStream(\"DigiWriter\").Output = \"DATAFILE='PFN:Gauss_example.xdigi' TYP='POOL_ROOTTREE' OPT='REC'\" OutputStream(\"DigiWriter\").OptItemList += [ '/Event/Gen/HepMCEvents#1' ] To run the following Simulation you cd to Boole dir and run the following: ./run gaudirun.py ../Boole-Job.py Hint: you might need to run lhcb-proxy-init to obtain the permissions to run Boole. Resources \u00b6 Simulation in LHCb Twiki","title":"Boole"},{"location":"Boole/run.html#boole-documentation","text":"The purpose of this page is to collect some new documentation for important aspects about LHCb digitization software called Boole . All of this assumes that you have already a current LHCb software installation (i.e on lxplus )","title":"Boole Documentation"},{"location":"Boole/run.html#quick-setup","text":"Set up Gauss: lb-dev Boole/v41r2 you can decide which version specifying what is after Boole so it is like Boole/<version> cd to the Boole dir cd ./BooleDev_v41r2 run git lb-use Boole run make configure $$ make install This can be done on one command like lb-dev Boole/v49r21 \\\\ cd ./BooleDev_v41r2 \\\\ git lb-use Boole \\\\ make configure \\\\ make install","title":"Quick Setup"},{"location":"Boole/run.html#example","text":"In this example, I will take the .sim file from LHCb starter kit example and run it through Boole to create the digitization. The startedkit example which deals with this decay $\\left.D^{*+} \\rightarrow D^{0}\\left(\\rightarrow K^{+} K^{-} \\mu^{+} \\mu^{-}\\right) \\pi^{+}\\right)$. Following the same tutorial I wrote about Gauss here . The idea is similar, you pass the options to /.run script or you can have job file like Boole.Job.py which contains everything. I will do the later becuase it is easier to debug and more organized. This is a very minimal Boole job file from Gaudi.Configuration import * from Configurables import Boole, LHCbApp from Gaudi.Configuration import * importOptions(\"$APPCONFIGOPTS/Boole/Default.py\") importOptions(\"$APPCONFIGOPTS/Boole/DataType-2015.py\") importOptions(\"$APPCONFIGOPTS/Boole/Boole-SetOdinRndTrigger.py\") importOptions(\"$APPCONFIGOPTS/Persistency/Compression-ZLIB-1.py\") importOptions(\"$APPCONFIGOPTS/Boole/SMOG.py\") LHCbApp().DDDBtag = \"dddb-20170721-3\" LHCbApp().CondDBtag = \"sim-20170721-2-vc-md100\" Boole().DatasetName = \"Example\" HistogramPersistencySvc().OutputFile = \"example.root\" EventSelector().Input = [\"DATAFILE='PFN:/afs/cern.ch/user/m/melashri/public/sim_tutorial/Gauss-27175000-5ev-20220526.sim', TYP='POOL_ROOTTREE' OPT='READ'\"] OutputStream(\"DigiWriter\").Output = \"DATAFILE='PFN:Gauss_example.xdigi' TYP='POOL_ROOTTREE' OPT='REC'\" OutputStream(\"DigiWriter\").OptItemList += [ '/Event/Gen/HepMCEvents#1' ] To run the following Simulation you cd to Boole dir and run the following: ./run gaudirun.py ../Boole-Job.py Hint: you might need to run lhcb-proxy-init to obtain the permissions to run Boole.","title":"Example"},{"location":"Boole/run.html#resources","text":"Simulation in LHCb Twiki","title":"Resources"},{"location":"Forms/QEE_MC_Request.html","text":"General Information \u00b6 To submit a QEE simulation request use the google form here . If that link doesn't work, check the QEE twiki for the form here . The current QEE simulation liasons can be found here in the QCD, Electroweak, and Exotica row. The Google Form \u00b6 The google form is fairly self explanatory, however there are a few fields that can be tricky the first time filling out the form. The 'Brief Motivation' field should be one or two sentences about what analysis the simulation request is for. To determine whcih version of Gauss is needed for your simulation I would consult the following chart in the starterkit here . I have only needed to use Sim09 so far, and I believe all run 3 simulations will use Sim10. For the 'Decay files' field be sure to look up the simulation process's event type number here and list its associated decay file. In the 'Any other information' section it is typically recommended to request the generator statistics table as it contians the cross section PYTHIA found for the simulated process. Below is an example form filled out. Email Addresses: me@cern.ch, advisor@cern.ch Brief Motivation: The University of Cincinnati group is trying to measure the WW->lvlv cross section, and needs MC for Run 2. For which year(s) do you need your samples to be made, and how many events in total: Years: 2016, 2017, 2018 Events: 12M Total, 4M Each. Which data format: Full DST Is your request exceeding the limit and requires PPG approval: Leave Blank For run-2 requests, would you like to use Sim09 or Sim10? Sim09 Event type numbers and events to be produced per magnet polarity: 41922002: 2000000 Decay files: WW_lnul,lnul=1l15GeV.dec Any other information: Generator Statistics Table Requested After Submitting the Form \u00b6 After submitting the form the QEE MC liaisons will contact you and may clarify some information in the form. Once the request has been confirmed with the liaisons, and with the QEE conveners who the MC liaisons will cc in their email, the simulation request will be submitted. The request will go through several status changes ending with 'Done'. Once completed the MC liaisons will need to generate the statistics table which will take a few more days, however the data will be available in the bookkeeping once the status has been set to done.","title":"Forms"},{"location":"Forms/QEE_MC_Request.html#general-information","text":"To submit a QEE simulation request use the google form here . If that link doesn't work, check the QEE twiki for the form here . The current QEE simulation liasons can be found here in the QCD, Electroweak, and Exotica row.","title":"General Information"},{"location":"Forms/QEE_MC_Request.html#the-google-form","text":"The google form is fairly self explanatory, however there are a few fields that can be tricky the first time filling out the form. The 'Brief Motivation' field should be one or two sentences about what analysis the simulation request is for. To determine whcih version of Gauss is needed for your simulation I would consult the following chart in the starterkit here . I have only needed to use Sim09 so far, and I believe all run 3 simulations will use Sim10. For the 'Decay files' field be sure to look up the simulation process's event type number here and list its associated decay file. In the 'Any other information' section it is typically recommended to request the generator statistics table as it contians the cross section PYTHIA found for the simulated process. Below is an example form filled out. Email Addresses: me@cern.ch, advisor@cern.ch Brief Motivation: The University of Cincinnati group is trying to measure the WW->lvlv cross section, and needs MC for Run 2. For which year(s) do you need your samples to be made, and how many events in total: Years: 2016, 2017, 2018 Events: 12M Total, 4M Each. Which data format: Full DST Is your request exceeding the limit and requires PPG approval: Leave Blank For run-2 requests, would you like to use Sim09 or Sim10? Sim09 Event type numbers and events to be produced per magnet polarity: 41922002: 2000000 Decay files: WW_lnul,lnul=1l15GeV.dec Any other information: Generator Statistics Table Requested","title":"The Google Form"},{"location":"Forms/QEE_MC_Request.html#after-submitting-the-form","text":"After submitting the form the QEE MC liaisons will contact you and may clarify some information in the form. Once the request has been confirmed with the liaisons, and with the QEE conveners who the MC liaisons will cc in their email, the simulation request will be submitted. The request will go through several status changes ending with 'Done'. Once completed the MC liaisons will need to generate the statistics table which will take a few more days, however the data will be available in the bookkeeping once the status has been set to done.","title":"After Submitting the Form"},{"location":"Gauss/run.html","text":"Gauss Documentation \u00b6 The purpose of this page is to collect some new documentation for important aspects about LHCb simulation software called Gauss . All of this assumes that you have already a current LHCb software installation (i.e on lxplus ) Quick Setup \u00b6 Set up Gauss: lb-dev Gauss/v49r21 you can decide which version specifying what is after Gauss so it is like Gauss/<version> cd to the Gauss dir cd ./GaussDev_v49r21 We will need the DecFiles package which is available on CERN Gitlab (this is where the pre-defined decay is there) git lb-clone-pkg Gen/DecFiles We now build Gauss by running make This can be done on one command like lb-dev Gauss/v49r21 \\\\ cd ./GaussDev_v49r21 \\\\ git lb-clone-pkg Gen/DecFiles \\\\ make Hint: This will install Sim09 starterkit Example \u00b6 To run the startedkit example which deals with this decay $\\left.D^{*+} \\rightarrow D^{0}\\left(\\rightarrow K^{+} K^{-} \\mu^{+} \\mu^{-}\\right) \\pi^{+}\\right)$. This decay is pre-defined in Gauss and is given the event type # 27175000 . This is determined by the Decfiles library. The DecFile controls the decay itself (i.e. what EvtGen does) as well as provide any event-type specific configuration (e.g. generator cuts). They exist in the Gen/DecFile package. The content of the Decfile is the following: # EventType: 27175000 # # Descriptor: [D*(2010)+ -> (D0 -> {K+ K- mu+ mu-}) pi+]cc # # NickName: Dst_D0pi,KKmumu=DecProdCut # # Cuts: DaughtersInLHCb # # Documentation: Forces the D* decay in generic b-bbar / c-cbar events + Requires products to be in LHCb acceptance # EndDocumentation # # PhysicsWG: Charm # Tested: Yes # Responsible: Luisa Arrabito # Email: unknown@<nospam>cern.ch # Date: 20091215 # Alias MyD0 D0 Alias MyantiD0 anti-D0 ChargeConj MyD0 MyantiD0 Decay D*+sig 1.000 MyD0 pi+ VSS; Enddecay CDecay D*-sig Decay MyD0 1.000 K+ K- mu+ mu- PHSP; Enddecay CDecay MyantiD0 # End This Decfile code contains the Information which tells Gauss what to except when calling <event-type>.py as an option. There is a current parser online to help you with event type. To run Gauss you need to specify the options which tells Gauss about what you need. you can pass the options using the syntax ./run gaudirun.py option Gauss-Job.py But the best way is to include all the options in Gauss-Job.py which is where you need to call things. For example Instead of running ./run gaudirun.py '$APPCONFIGOPTS/Gauss/Beam6500GeV-md100-2016-nu1.6.py' \\ # Sets beam energy and position '$APPCONFIGOPTS/Gauss/EnableSpillover-25ns.py' \\ # Enables spillover (only Run2) '$APPCONFIGOPTS/Gauss/DataType-2016.py' \\ '$APPCONFIGOPTS/Gauss/RICHRandomHits.py' \\ # Random hits in RICH for occupancy '$DECFILESROOT/options/{eventnumber}.py' \\ # Event type containing the signal '$LBPYTHIA8ROOT/options/Pythia8.py' \\ # Setting Pythia8 as generator '$APPCONFIGOPTS/Gauss/G4PL_FTFP_BERT_EmNoCuts.py' \\ # Physics simulated by Geant4 Gauss-Job.py You can define your own options in Gauss-Job.py As the fOllowing: from Gauss.Configuration import * importOptions(\"$APPCONFIGOPTS/Gauss/Beam6500GeV-md100-2016-nu1.6.py\") importOptions(\"$APPCONFIGOPTS/Gauss/EnableSpillover-25ns.py\") importOptions(\"$APPCONFIGOPTS/Gauss/DataType-2016.py\") importOptions(\"$APPCONFIGOPTS/Gauss/RICHRandomHits.py\") importOptions(\"$DECFILESROOT/options/27175000.py\") importOptions(\"$LBPYTHIA8ROOT/options/Pythia8.py\") importOptions(\"$APPCONFIGOPTS/Gauss/G4PL_FTFP_BERT_EmNoCuts.py\") GaussGen = GenInit(\"GaussGen\") GaussGen.FirstEventNumber = 1 GaussGen.RunNumber = 1082 from Configurables import LHCbApp LHCbApp().DDDBtag = 'dddb-20170721-3' LHCbApp().CondDBtag = 'sim-20170721-2-vc-md100' LHCbApp().EvtMax = 5 To run the following Simulation you cd to Gauss dir and run the following: ./run gaudirun.py ../Gauss-Job.py Which will be equivalent to ./run gaudirun.py '$APPCONFIGOPTS/Gauss/Beam6500GeV-md100-2016-nu1.6.py' '$LBPYTHIA8ROOT/options/Pythia8.py' '$DECFILESROOT/options/27175000.py' ../Gauss-Job.py Which of course will depend on where you have Gauss-Job.py file Hint: you will need first to run lhcb-proxy-init to obtain the permissions to run Gauss. Hint: This will take long time ~20 minutes because we asked for a full detector simulation by Geant4 but we can only tell Gauss to run the generator phase of simulation only by adding '$GAUSSOPTS/GenStandAlone.py' as an option. Now lets give some information about the options which we told gauss to use. The following table summarize that: Option Description '$APPCONFIGOPTS/Gauss/Beam6500GeV-md100-2016-nu1.6.py\u2019 Sets beam energy and position '$APPCONFIGOPTS/Gauss/EnableSpillover-25ns.py' Enables spillover (only Run2, not sure about RUN3 yet) '$APPCONFIGOPTS/Gauss/DataType-2016.py' Tells Gauss which data category to expect (divided by year) '$APPCONFIGOPTS/Gauss/RICHRandomHits.py' Random hits in RICH for occupancy '$DECFILESROOT/options/{eventnumber}.py' Event type containing the signal '$LBPYTHIA8ROOT/options/Pythia8.py' This tells Gauss to use pythia as signal generator '$APPCONFIGOPTS/Gauss/G4PL_FTFP_BERT_EmNoCuts.py' This tells Gauss to use Geant4 as detetor simulation tool with config '$GAUSSOPTS/GenStandAlone.py' Run only signal generation part and ignore full detetor simulation Nightly version \u00b6 This is how we can run the nightly version of Gauss The general syntax is lb-run --nighlty lhcb-gauss-dev/SLOTID Gauss/HEAD gaudirun.py Gauss-Job.py Where SLOTID would be Today or the one that we are interested The default is Today and could also be used as follows lb-run --nightly lhcb-gauss-dev Gauss/HEAD gaudirun.py Gauss-Job.py Resources \u00b6 Simulation in LHCb Twiki LHCb Software Training Twiki Gauss in LHCb Starterkit","title":"Gauss"},{"location":"Gauss/run.html#gauss-documentation","text":"The purpose of this page is to collect some new documentation for important aspects about LHCb simulation software called Gauss . All of this assumes that you have already a current LHCb software installation (i.e on lxplus )","title":"Gauss Documentation"},{"location":"Gauss/run.html#quick-setup","text":"Set up Gauss: lb-dev Gauss/v49r21 you can decide which version specifying what is after Gauss so it is like Gauss/<version> cd to the Gauss dir cd ./GaussDev_v49r21 We will need the DecFiles package which is available on CERN Gitlab (this is where the pre-defined decay is there) git lb-clone-pkg Gen/DecFiles We now build Gauss by running make This can be done on one command like lb-dev Gauss/v49r21 \\\\ cd ./GaussDev_v49r21 \\\\ git lb-clone-pkg Gen/DecFiles \\\\ make Hint: This will install Sim09","title":"Quick Setup"},{"location":"Gauss/run.html#starterkit-example","text":"To run the startedkit example which deals with this decay $\\left.D^{*+} \\rightarrow D^{0}\\left(\\rightarrow K^{+} K^{-} \\mu^{+} \\mu^{-}\\right) \\pi^{+}\\right)$. This decay is pre-defined in Gauss and is given the event type # 27175000 . This is determined by the Decfiles library. The DecFile controls the decay itself (i.e. what EvtGen does) as well as provide any event-type specific configuration (e.g. generator cuts). They exist in the Gen/DecFile package. The content of the Decfile is the following: # EventType: 27175000 # # Descriptor: [D*(2010)+ -> (D0 -> {K+ K- mu+ mu-}) pi+]cc # # NickName: Dst_D0pi,KKmumu=DecProdCut # # Cuts: DaughtersInLHCb # # Documentation: Forces the D* decay in generic b-bbar / c-cbar events + Requires products to be in LHCb acceptance # EndDocumentation # # PhysicsWG: Charm # Tested: Yes # Responsible: Luisa Arrabito # Email: unknown@<nospam>cern.ch # Date: 20091215 # Alias MyD0 D0 Alias MyantiD0 anti-D0 ChargeConj MyD0 MyantiD0 Decay D*+sig 1.000 MyD0 pi+ VSS; Enddecay CDecay D*-sig Decay MyD0 1.000 K+ K- mu+ mu- PHSP; Enddecay CDecay MyantiD0 # End This Decfile code contains the Information which tells Gauss what to except when calling <event-type>.py as an option. There is a current parser online to help you with event type. To run Gauss you need to specify the options which tells Gauss about what you need. you can pass the options using the syntax ./run gaudirun.py option Gauss-Job.py But the best way is to include all the options in Gauss-Job.py which is where you need to call things. For example Instead of running ./run gaudirun.py '$APPCONFIGOPTS/Gauss/Beam6500GeV-md100-2016-nu1.6.py' \\ # Sets beam energy and position '$APPCONFIGOPTS/Gauss/EnableSpillover-25ns.py' \\ # Enables spillover (only Run2) '$APPCONFIGOPTS/Gauss/DataType-2016.py' \\ '$APPCONFIGOPTS/Gauss/RICHRandomHits.py' \\ # Random hits in RICH for occupancy '$DECFILESROOT/options/{eventnumber}.py' \\ # Event type containing the signal '$LBPYTHIA8ROOT/options/Pythia8.py' \\ # Setting Pythia8 as generator '$APPCONFIGOPTS/Gauss/G4PL_FTFP_BERT_EmNoCuts.py' \\ # Physics simulated by Geant4 Gauss-Job.py You can define your own options in Gauss-Job.py As the fOllowing: from Gauss.Configuration import * importOptions(\"$APPCONFIGOPTS/Gauss/Beam6500GeV-md100-2016-nu1.6.py\") importOptions(\"$APPCONFIGOPTS/Gauss/EnableSpillover-25ns.py\") importOptions(\"$APPCONFIGOPTS/Gauss/DataType-2016.py\") importOptions(\"$APPCONFIGOPTS/Gauss/RICHRandomHits.py\") importOptions(\"$DECFILESROOT/options/27175000.py\") importOptions(\"$LBPYTHIA8ROOT/options/Pythia8.py\") importOptions(\"$APPCONFIGOPTS/Gauss/G4PL_FTFP_BERT_EmNoCuts.py\") GaussGen = GenInit(\"GaussGen\") GaussGen.FirstEventNumber = 1 GaussGen.RunNumber = 1082 from Configurables import LHCbApp LHCbApp().DDDBtag = 'dddb-20170721-3' LHCbApp().CondDBtag = 'sim-20170721-2-vc-md100' LHCbApp().EvtMax = 5 To run the following Simulation you cd to Gauss dir and run the following: ./run gaudirun.py ../Gauss-Job.py Which will be equivalent to ./run gaudirun.py '$APPCONFIGOPTS/Gauss/Beam6500GeV-md100-2016-nu1.6.py' '$LBPYTHIA8ROOT/options/Pythia8.py' '$DECFILESROOT/options/27175000.py' ../Gauss-Job.py Which of course will depend on where you have Gauss-Job.py file Hint: you will need first to run lhcb-proxy-init to obtain the permissions to run Gauss. Hint: This will take long time ~20 minutes because we asked for a full detector simulation by Geant4 but we can only tell Gauss to run the generator phase of simulation only by adding '$GAUSSOPTS/GenStandAlone.py' as an option. Now lets give some information about the options which we told gauss to use. The following table summarize that: Option Description '$APPCONFIGOPTS/Gauss/Beam6500GeV-md100-2016-nu1.6.py\u2019 Sets beam energy and position '$APPCONFIGOPTS/Gauss/EnableSpillover-25ns.py' Enables spillover (only Run2, not sure about RUN3 yet) '$APPCONFIGOPTS/Gauss/DataType-2016.py' Tells Gauss which data category to expect (divided by year) '$APPCONFIGOPTS/Gauss/RICHRandomHits.py' Random hits in RICH for occupancy '$DECFILESROOT/options/{eventnumber}.py' Event type containing the signal '$LBPYTHIA8ROOT/options/Pythia8.py' This tells Gauss to use pythia as signal generator '$APPCONFIGOPTS/Gauss/G4PL_FTFP_BERT_EmNoCuts.py' This tells Gauss to use Geant4 as detetor simulation tool with config '$GAUSSOPTS/GenStandAlone.py' Run only signal generation part and ignore full detetor simulation","title":"starterkit Example"},{"location":"Gauss/run.html#nightly-version","text":"This is how we can run the nightly version of Gauss The general syntax is lb-run --nighlty lhcb-gauss-dev/SLOTID Gauss/HEAD gaudirun.py Gauss-Job.py Where SLOTID would be Today or the one that we are interested The default is Today and could also be used as follows lb-run --nightly lhcb-gauss-dev Gauss/HEAD gaudirun.py Gauss-Job.py","title":"Nightly version"},{"location":"Gauss/run.html#resources","text":"Simulation in LHCb Twiki LHCb Software Training Twiki Gauss in LHCb Starterkit","title":"Resources"}]}